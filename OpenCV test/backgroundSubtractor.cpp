	//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
	//C
#include <stdio.h>
	//C++
#include <iostream>
#include <string>
 //Custom
#include "backgroundSubtractor.hpp"
#include "imageProcessor.hpp"


void processVideo(std::string& videoFilename, std::string& savePath) {

		// Global variables
	cv::Mat frame; //current frame
	cv::Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	cv::Ptr<cv::BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
	int keyboard=0; //input from keyboard


	//Image writer PNG parameters.
	std::vector<int> compression_params;
	compression_params.push_back(CV_IMWRITE_PNG_COMPRESSION);
	compression_params.push_back(3);

	imageProcessor imProcessor;
	int numberOfFrame=0;
		//create GUI windows
	cv::namedWindow("Frame");
	cv::namedWindow("FG Mask MOG 2");

		//create a Background Subtractor object
		//BackgroundSubtractorMOG2(int history, float varThreshold, bool bShadowDetection=true)
	pMOG2 = cv::createBackgroundSubtractorMOG2(2000,220,false);

		//create the capture object
	cv::VideoCapture capture(videoFilename);

	if(!capture.isOpened()){
			//error in opening the video input
		std::cerr << "Unable to open video file: " << videoFilename << std::endl;
		exit(EXIT_FAILURE);
	}
		//read input data. ESC or 'q' for quitting
	while( (char)keyboard != 'q' && (char)keyboard != 27 ){
			//read the current frame
		if(!capture.read(frame)) {
			std::cerr << "Unable to read next frame." << std::endl;
			std::cerr << "Exiting..." << std::endl;
			exit(EXIT_FAILURE);
		}
			//update the background model
		pMOG2->apply(frame, fgMaskMOG2);

		numberOfFrame++;

		//Processing the foreground image.
		auto keypoints = imProcessor.blobDetection(fgMaskMOG2,0);
		std::string naming = "frame"+std::to_string(numberOfFrame);

		imProcessor.blobExtractor(fgMaskMOG2, keypoints, savePath, naming);

		imshow("Frame", frame);
		imshow("FG Mask MOG 2", fgMaskMOG2);

			//get the input from the keyboard
		keyboard =cv::waitKey( 30 );
	}
		//delete capture object
	capture.release();
	cv::destroyAllWindows();
}
